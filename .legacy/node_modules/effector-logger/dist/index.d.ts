import * as effector from 'effector';
declare const createDomain: (name?: string | undefined) => effector.Domain, createStore: <State>(defaultState: State, config?: {
    name?: string | undefined;
    sid?: string | undefined;
    updateFilter?: ((update: State, current: State) => boolean) | undefined;
    serialize?: "ignore" | undefined;
} | undefined) => effector.Store<State>, createEffect: {
    <FN extends Function>(handler: FN): effector.EffectByHandler<FN, Error>;
    <Params, Done, Fail = Error>(handler: (params: Params) => Done | Promise<Done>): effector.Effect<Params, Done, Fail>;
    <FN_1 extends Function, Fail_1>(handler: FN_1): effector.EffectByHandler<FN_1, Fail_1>;
    <FN_2 extends Function>(config: {
        name?: string | undefined;
        handler: FN_2;
        sid?: string | undefined;
    }): effector.EffectByHandler<FN_2, Error>;
    <Params_1, Done_1, Fail_2 = Error>(name?: string | undefined, config?: {
        handler?: ((params: Params_1) => Done_1 | Promise<Done_1>) | undefined;
        sid?: string | undefined;
    } | undefined): effector.Effect<Params_1, Done_1, Fail_2>;
    <Params_2, Done_2, Fail_3 = Error>(config: {
        handler?: ((params: Params_2) => Done_2 | Promise<Done_2>) | undefined;
        sid?: string | undefined;
        name?: string | undefined;
    }): effector.Effect<Params_2, Done_2, Fail_3>;
}, createEvent: {
    <Payload = void>(name?: string | undefined): effector.Event<Payload>;
    <Payload_1 = void>(config: {
        name?: string | undefined;
        sid?: string | undefined;
    }): effector.Event<Payload_1>;
};
export { createDomain, createStore, createEffect, createEvent };
export * from 'effector';
