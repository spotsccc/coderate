import { FC } from 'react';
import { ReflectCreatorContext, View, BindByProps, PropsByBind, Hooks } from './types';
export interface ReflectConfig<Props, Bind extends BindByProps<Props>> {
    view: View<Props>;
    bind: Bind;
    hooks?: Hooks;
}
export declare function reflectCreateFactory(context: ReflectCreatorContext): <Props>(view: View<Props>) => <Bind extends BindByProps<Props> = BindByProps<Props>>(bind: Bind, params?: Pick<ReflectConfig<Props, Bind>, "hooks"> | undefined) => FC<PropsByBind<Props, Bind>>;
export declare function reflectFactory(context: ReflectCreatorContext): <Props, Bind extends BindByProps<Props> = BindByProps<Props>>(config: ReflectConfig<Props, Bind>) => FC<PropsByBind<Props, Bind>>;
