/// <reference types="react" />
export declare const reflect: <Props, Bind extends import("../core/types").BindByProps<Props> = import("../core/types").BindByProps<Props>>(config: import("../core/reflect").ReflectConfig<Props, Bind>) => import("react").FC<import("../core/types").PropsByBind<Props, Bind>>;
export declare const createReflect: <Props>(view: import("../core/types").View<Props>) => <Bind extends import("../core/types").BindByProps<Props> = import("../core/types").BindByProps<Props>>(bind: Bind, params?: Pick<import("../core/reflect").ReflectConfig<Props, Bind>, "hooks"> | undefined) => import("react").FC<import("../core/types").PropsByBind<Props, Bind>>;
export declare const variant: <Props, Variant extends string, Bind extends import("../core/types").BindByProps<Props>>(config: {
    source: import("effector").Store<Variant>;
    bind?: Bind | undefined;
    cases: Record<Variant, import("../core/types").View<Props>>;
    hooks?: import("../core/types").Hooks | undefined;
    default?: import("react").FC<Props> | import("react").ComponentClass<Props, any> | undefined;
}) => import("react").FC<import("../core/types").PropsByBind<Props, Bind>>;
export declare const list: <Item, Props, Bind extends import("../core/types").BindByProps<Props> = import("../core/types").BindByProps<Props>>(config: {
    view: import("../core/types").View<Props>;
    source: import("effector").Store<Item[]>;
    bind: Bind;
    hooks?: import("../core/types").Hooks | undefined;
    getKey?: ((item: Item) => import("react").Key) | undefined;
    mapItem: { [P in keyof import("../core/types").PropsByBind<Props, Bind>]: (item: Item, index: number) => import("../core/types").PropsByBind<Props, Bind>[P]; };
}) => import("react").FC<{}>;
